PRIMEIRAS ANOTACOES:
i get the goosebogs:
Data Structure:
- Are more complex ways to organize data in memory, allowing us to store information in different layouts

to build a data structure:
> struct to create custom data types
> . to access properties in a structure
> * to go to an address in memory pointed to by a pointer
> -> to access properties in a structure pointed to by a pointer

Linked list:
- we can store a list of values that can easily be grown by storing values in different parts of memory
- are different than an array since our values are no longer next to one another in memory
EXEMPLOS:
1 = 0x123[linked to(node) 0x456
2 = 0x456[linked to(node) 0x789 etc- Next to our value of 1, for example, we also store a pointer, 0x456, 
to the next value. We’ll call this a node, a component of our data structure that stores both a value and a pointer

For our last node value , we have the null pointer, since there’s no next element;When we need to insert another
 node, we can just change that single null pointer to point to our new value

In code, we might create our own struct called node, and we need to store both
 our value, an int called number, and a pointer to the next node, called next:

typedef struct node
{
    int number;
    struct node *next;
}
node;

To add an element, first we’ll need to allocate some memory for a node, and set its values:
// We use sizeof(node) to get the right amount of memory to allocate, and
// malloc returns a pointer that we save as n
node *n = malloc(sizeof(node));

// We want to make sure malloc succeeded in getting memory for us
if (n != NULL)
{
    // This is equivalent to (*n).number, where we first go to the node pointed
    // to by n, and then set the number property. In C, we can also use this
    // arrow notation
    n->number = 1;
    // Then we need to make sure the pointer to the next node in our list
    // isn't a garbage value, but the new node won't point to anything (for now)
    n->next = NULL;
}

